var HUFFMAN_LUTBITS = (10)
var HUFFMAN_LUTSIZE = (1<<HUFFMAN_LUTBITS)
var snap_single = Buffer.from("5adbddc16af301d17c576a8921bde5f2aec64cdf0805e81b8097b415cabc2f0519fd6732228c6120ef079b4f0bff67b226ffff9fa94c2ce454e30075a5b721ff990ac8ffff674223ffff9fe98e283ac35fd1ff4c09e4ffff335591ffffafb2a4852a7badcf44f2ffff99c9ffff35cba427ffff9fe946feff3fd386fcff7f0b9fe54f2cfc287f6261b9a92716b4984f2c54f67f6201bdfa898516ee130b6dea27162cb94f2ca077f7c44257ee9e586832f5c4c28ffa27169c9a7a62e123fa271650d54f2cdc77f7c44231534f2c54987a62e163774f2c4cba7b62a198fa89859fdc2716fc4c3db1e0277f6241d37962e163534f2cdc63ea89857be99f5868e43eb1a0e2ee89054df5130b0a4c3db15068ea890505ee9e5870563fb17035f789054b774f2ca4a99f58d0953fb160297f624157ffc402aafc8985abdd3db1d066ea89857be89f58a86cea8985fbce130bf79a7a622193fe8985abe44f2c14739e583030f5c4428abb27168c719f58f8d1dd134d8a475c52dc00", "hex");
var huffman = [ "1", "0001", "01000", "01101000", "011110", "0110111", "01101100", "01110110", "00100", "0011001", "0101111", "01111111", "0100111", "011100", "00101111", "011101110", "0101011", "011001010", "0011101", "010101010", "00001111", "0111110110", "001011000", "001111100", "0000100", "001111001", "010010000", "000010110", "010100000", "0110011", "01010011", "0111010010", "001101011", "001100010", "010111011", "0110010111", "000011000", "010100010", "010110111", "010011010", "0110101", "01011100", "010010001", "0111111010", "001011011", "0110110101", "0111010001", "0110100110", "0111010111", "0111110010", "0111110100", "0101101011", "00111100010", "001110001011", "0111110101100", "010100011100", "001010111010", "000011100111", "000010100101", "001011100110", "0111110000111", "00101110000", "0110010110100", "010010101000", "01010010", "001111011", "0101101010", "0011000111", "0101100110", "0100110110", "0011110000", "0000111000", "0011111010", "00101001", "0101010010", "010101011", "0011000011", "0000101110", "01100100001", "01111110111", "01110101000", "01111101111", "01111100000", "0011011", "0010100001", "001101010", "01011101000", "01011000000", "0000110011", "01001010101", "0101000111010", "010110011110", "0101110100111", "001011100011", "0011111011100", "0101100111001", "0101100111000", "001110001010", "0110110100011", "0010101110001", "001110010001", "001110010000", "0010111001111", "0010111001110", "0111010110101", "0111010110100", "0101100111011", "0101100111010", "01110101001000", "001011100010", "0111010110111", "0110110100010", "0101110100110", "000011100110", "00001110010", "001011100101", "000010100100", "0110110100101", "01111101011010", "010100011101101", "0111010110110", "000010100111", "0010101110000", "0111010110001", "0110110100100", "001010101101", "01110101001001", "0011100011101", "00000", "0111111001", "001101001", "01111110110", "010110001", "01110111100", "010010100", "01110101011", "010110100", "01111100010", "010011001", "0010100000", "001011010", "01111110001", "001111111", "0011000110", "011001001", "01111110000", "001101000", "0000110010", "011000", "0101000110", "010011000", "01100100011", "001011001", "0100110111", "010101000", "01011101010", "010010111", "01111100011", "001110011", "0011100101", "001111110", "0101100001", "0111110011", "0111011111", "011011011", "001100000", "011010010", "0011000010", "010110110", "0110100111", "010110010", "0010101111", "010010110", "0000101111", "001010110", "01111101110", "00001101", "001010100", "000011101", "01110101010", "000010101", "01100100010", "010100001", "01110100111", "001010001", "01110100110", "001110000", "01110111101", "001111010", "0111010000", "001011101", "0101010011", "010111010111", "010010101101", "001111000111", "011011010011", "001110010011", "010111010110", "011111000010", "001111000110", "011111010101", "011011010000", "001110010010", "000010100110", "010100011111", "001111101101", "011101010011", "010010101100", "010010101111", "001111101100", "011001011001", "010111010010", "000010100001", "011001011000", "010100011110", "001010101100", "00111000100", "011001000001", "0111010110000", "001111101111", "0101100000101", "001010101111", "001010101110", "011001011011", "001110001101", "001010101001", "0111010110011", "001011100100", "0011111011101", "000010100000", "011111010111", "0101100000100", "001010101000", "0111010110010", "001010111011", "001010101011", "0111110000110", "011001000000", "000010100011", "001010101010", "01111101011011", "0011100011100", "010110011111", "010010101110", "010010101001", "000010100010", "001110001100", "0111110101001", "01010001110111", "0111110101000", "0111010100101", "001110001111", "0110010110101", "001010111001", "010110000011", "01001001", "010100011101100" ]
var example = Buffer.from("00010002008000", "hex") // That means, in order to encode the bytes
var str = "" 

for (i in example.toJSON().data) {
	j = example.toJSON().data[i]
	str += huffman[j]
	console.log(huffman[j], j)
}
str += huffman[huffman.length-1] // add EOF
_str = ""
console.log(str) 

for (x in str) {
	var char = str[x] 
	if ((x % 4) == 0 && x != 0) {
		_str += " "
		console.log(`"${str[x]}"`)
		
	} 
	_str += char;
}
str = _str;
delete _str;
// console.log(str.split(" ").length & 1, str.length)

for (i = 0; i < 8; i++) {
	split = str.split(" ")
	if (split.reverse()[0].length < 4) {
		str += '0'
	} else if (split.length & 1)
		str += ' '
} // pad unset bits to full bytes
_str = ""
for (let i = 0; i < str.split(" ").length/2; i++) {
	split = str.split(" ")
	_str += (split[i*2] + split[i*2+1]).split("").reverse().join("") + ' '
}
console.log(_str)
// reverse every byte 

console.log(str, str.split(" ").reverse()[0].charCodeAt(0))