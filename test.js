class MinecraftProtocol {
	static writeVarInt(val) {
		// "VarInts are never longer than 5 bytes"
		// https://wiki.vg/Data_types#VarInt_and_VarLong
		const buf = Buffer.alloc(5)
		// let written = 0

		// while (true) {
		// 	if ((val & 0xFFFFFF80) === 0) {
		// 		buf.writeUInt8(val, written++)
		// 		break
		// 	} else {
		// 		buf.writeUInt8(val & 0x7F | 0x80, written++)
		// 		val >>>= 7
		// 	}
		// }
		// return val;
		return Buffer.from([16, 0, 0])
		// return buf.slice(0, written)
	}
	static writeVarIn2t(val) {
		// "VarInts are never longer than 5 bytes"
		// https://wiki.vg/Data_types#VarInt_and_VarLong
		const buf = Buffer.alloc(5)
		let written = 0

		while (true) {
			if ((val & 0xFFFFFF80) === 0) {
				buf.writeUInt8(val, written++)
				break
			} else {
				buf.writeUInt8(val & 0x7F | 0x80, written++)
				val >>>= 7
			}
		}
		return buf.slice(0, written)
	}

	static writeString(val) {
		return Buffer.from(val, 'UTF-8')
	}

	static writeUShort(val) {
		return Buffer.from([val >> 8, val & 0xFF])
	}

	static concat(chunks) {
		let length = 0

		for (const chunk of chunks) {
			length += chunk.length
		}

		const buf = [
			MinecraftProtocol.writeVarInt(length),
			...chunks
		]

		return Buffer.concat(buf)
	}
}
function cviPack(i) {
	pDst = (i>>25)&0x40; // set sign bit if i<0
	i = i^(i>>31); // if(i<0) i = ~i
	pDst |= i&0x3F; // pack 6bit into dst
	i >>= 6; // discard 6 bits
	if(i) {
		pDst |= 0x80; // set extend bit
		do {
			pDst++;
			pDst = i&(0x7F); // pack 7bit
			i >>= 7; // discard 7 bits
			pDst |= (i!=0)<<7; // set extend bit (may branch)
		} while (i);
	}
	pDst++;
	return pDst;
}
function cviUnpack(pSrc, pInOut) {
	Sign = (pSrc>>6)&1;
	pInOut = pSrc&0x3F;
	for (let i = 6; i <= 27 && pSrc&0x80; i+=7) 
		pInOut |= (pSrc.slice(1)&(0x7F))<<(i);
	pInOut ^= -Sign; // if(sign) *i = ~(*i)
	return pSrc + 1;
}
function Unpack(pData) {
	flag = (pData[0]>>6)&3;
	size = ((pData[0]&0x3f)<<4) | (pData[1]&0xf);
	seq = -1;
	if((flag)&1) {
		seq = ((pData[1]&0xf0)<<2) | pData[2];
		return {flag, size, seq, pData: pData.slice(3)};
	}
	return {flag, size, seq, pData: pData.slice(2)}
	// return pData + 2;

}
let a = Buffer.from([0x00, 0x03, 0x03, 0x40, 0x01, 0x05, 0x16, 0x49, 0x0b, 0x06, 0x0c, 0xa8, 0x0f, 0x88, 0x03, 0x32, 0xa8, 0x14, 0xb0, 0x12, 0xb4, 0x07, 0x96, 0x02, 0x9f, 0x01, 0xb0, 0xd1, 0x04, 0x80, 0x7d, 0xac, 0x04, 0x9c, 0x17, 0x32, 0x98, 0xdb, 0x06, 0x80, 0xb5, 0x18, 0x8c, 0x02, 0x00, 0xa0, 0x8b, 0x11, 0x88, 0x03, 0x00, 0x90, 0x8d, 0x06, 0x90, 0x01, 0x14, 0xbc, 0x0a, 0xa0, 0x9a, 0x0c, 0x88, 0x03, 0x80, 0xe2, 0x09, 0x98, 0xea, 0x01, 0xa0, 0x9a, 0x0c, 0x00, 0x00, 0xa4, 0x01, 0xa4, 0x01, 0x80, 0xf1, 0x04, 0xa8, 0x0f, 0x98, 0x09, 0xa4, 0x01, 0xbd, 0x01, 0x94, 0xc3, 0x01, 0x94, 0xc3, 0x01, 0x90, 0x8d, 0x06, 0x90, 0x8d, 0x06, 0x80, 0xe2, 0x09, 0x80, 0xe2, 0x09, 0x80, 0xe2, 0x09, 0x94, 0xc3, 0x01, 0x94, 0xc3, 0x01, 0x90, 0x8d, 0x06, 0x90, 0x8d, 0x06, 0x94, 0xc3, 0x01, 0x90, 0x8d, 0x06, 0x90, 0x9c, 0x01, 0xa0, 0xa9, 0x07, 0x00, 0xb8, 0x93, 0x09, 0xb4, 0x07, 0xbd, 0x01, 0xb8, 0xc8, 0x21, 0xbd, 0x01, 0xa0, 0xed, 0x1a, 0x88, 0x03, 0xa0, 0x84, 0x3d, 0x80, 0xb5, 0x18, 0x80, 0xda, 0xc4, 0x09, 0xac, 0x04, 0x40, 0x01, 0x07, 0x10, 0x80, 0xd8, 0x15, 0xb4])
// Buffer.from().
a = Buffer.from([0x10, 0x00, 0x00, 0x02, 0x54, 0x4b, 0x45, 0x4e, 0x80, 0xd8, 0x15, 0xb4])

console.log((Unpack(a)))